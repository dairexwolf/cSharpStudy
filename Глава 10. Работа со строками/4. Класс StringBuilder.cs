// Хотя класс System.String предоставляет нам широкую функциональность по работе со строками, все таки он имеет свои недостатки. Прежде всего, объект String представляет собой неизменяемую строку. Когда мы выполняем какой-нибудь метод класса String, система создает новый объект в памяти с выделением ему достаточного места. Удаление первого символа - не самая затратная операция. Однако когда подобных операций множество, а объем текста, для которого надо выполнить данные операции, также не самый маленький, то издержки при потере производительности становятся более существенными.
// Чтобы выйти из этой ситуации во фреймворк .NET был добавлен новый класс StringBuilder, который находится в пространстве имен System.Text. Этот класс представляет динамическую строку.
// При создании строки StringBuilder выделяет памяти больше, чем необходимо этой строке:

using System.Text;	//класс из этой библиотеки
// полное имя: 
// System.Text.StringBuilder sb = new System.Text.StringBuilder("Hello world!"); 	//12 символов
StringBuilder sb = new StringBuilder("Hello world!"); 	//12 символов
Console.WriteLine(sb);
Console.WriteLine($"Длина строки: {sb.Length}");
Console.WriteLine($"Емкость строки: {sb.Capacity}", );

// Теперь переменная sb представляет начальную строку "Hello World!". Эта строка имеет длину в 12 символов. Для хранения длины в классе StringBuilder есть свойство Length. Однако есть и вторая величина - емкость выделенной памяти. Это значение хранится в свойстве Capacity. Емкость - это выделенная память под объект. Хотя в данном случае длина равна 10 символов, но реально емкость будет составлять по умолчанию 16 символов.

// Класс StringBuilder имеет еще ряд конструкторов, которые позволяют разными способами выполнить начальную инициализацию объекта. Так, мы можем задать пустой объект, но установить начальную емкость:

StringBuilder sb = new StringBuilder(20);

Console.WriteLine($"Емкость: " + sb.Capacity);

// Если у нас заранее известен максимальный размер объекта, то мы можем таким образом сразу задать емкость и избежать последующих издержек при дополнительном выделении памяти.

// Теперь посмотрим на примере использование и преимущества класса StringBuilder:

StringBuilder sb = new StringBuilder("Название: ");
Console.WriteLine($"Длина строки: {sb.Length}");		// 10
Console.WriteLine($"Емкость строик: {sb.Capacity}");	// 16

sb.Append("Руководство");
Console.WriteLine($"Длина строки: {sb.Length}");		// 21
Console.WriteLine($"Емкость строик: {sb.Capacity}");	// 32

sb.Append(" по C#");
Console.WriteLine($"Длина строки: {sb.Length}");		// 27
Console.WriteLine($"Емкость строик: {sb.Capacity}");	// 32

// При создании объекта StringBuilder выделяется память по умолчанию для 16 символов, так как длина начальной строки меньше 16.
// Дальше применяется метод Append - этот метод добавляет к строке подстроку. Так как при объединении строк их общая длина - 22 символа - превышает начальную емкость в 16 символов, то начальная емкость удваивается - до 32 символов.
// Если бы итоговая длина строки была бы больше 32 символов, то емкость расширялась бы до размера длины строки.
// Далее опять применяется метод Append, однако финальная длина уже будет 28 символов, что меньше 32 символов, и дополнительная память не будет выделяться.

// Кроме метода Append класс StringBuilder предлагает еще ряд методов для операций над строками:
/*
	Insert: вставляет подстроку в объект StringBuilder, начиная с определенного индекса

	Remove: удаляет определенное количество символов, начиная с определенного индекса

	Replace: заменяет все вхождения определенного символа или подстроки на другой символ или подстроку

	AppendFormat: добавляет подстроку в конец объекта StringBuilder, форматирование строки, аналогичен методу Format у String
*/

StringBuilder sb = new StringBuilder("Hello world");
sb.Append("!");
sb.Append('!');
//вставляем слово
sb.Insert(sb.Length-8, " компьютерный");
Console.WriteLine(sb);

//заменяем слово
sb.Replace("компьютерный", "Computer");
Console.WriteLine(sb);

//удаляем 8 символов, начиная с 5
sb.Remove(5, 9);
Console.WriteLine(sb);

//получаем строку из объекта 
string str = sb.ToString();
Console.WriteLine(str);

int bucks = 300;
sb.AppendFormat("S vas {0:C}", bucks);
Console.WriteLine(sb);

//Когда надо использовать класс String, а когда StringBulder?
/*
							Microsoft рекомендует использовать класс String в следующих случаях:

При небольшом количестве операций и изменений над строками

При выполнении фиксированного количества операций объединения. В этом случае компилятор может объединить все операции объединения в одну

Когда надо выполнять масштабные операции поиска при построении строки, например IndexOf или StartsWith. Класс StringBuilder не имеет подобных методов.
*/
/*
							Класс StringBuilder рекомендуется использовать в следующих случаях:

При неизвестном количестве операций и изменений над строками во время выполнения программы

Когда предполагается, что приложению придется сделать множество подобных операций
*/