//Реляционный паттерн позволяет сравнить передаваемое в конструкцию значение с некоторыми значениями с помощью операций сравнения. Например, в зависимости от суммы вклада проценты по этому вкладу могут отличаться. Рассчитаем сумму процентов в зависимости от суммы вклада с использованием реляционного паттерна:
static decimal Calculate(decimal sum)
{
	return sum switch 
	{
		<= 0 => 0,					// если sum меньше или равно 0, возвращаем 0
		< 50000 => sum * 0.05m		// если sum меньше 50000, возвращаем sum * 0.05m
		/*Использование суффиксов
		При присвоении значений надо иметь в виду следующую тонкость: все вещественные литералы рассматриваются как значения типа double. И чтобы указать, что дробное число представляет тип float или тип decimal, необходимо к литералу добавлять суффикс: F/f - для float и M/m - для decimal.
		Подобным образом все целочисленные литералы рассматриваются как значения типа int. Чтобы явным образом указать, что целочисленный литерал представляет значение типа uint, надо использовать суффикс U/u, для типа long - суффикс L/l, а для типа ulong - суффикс UL/ul
		*/
		< 100000 => sum * 0.1m,		// если вам sum меньше 100000, возвращаем sum * 0.1m
		_ => sum * 0.2m				// в остальных случая возвращаем sum*0.02m
	};		
}

//Применение
static void Main()
{
	Console.WriteLine(Calculate(-200));		//0
	Console.WriteLine(Calculate(0));		//0
	Console.WriteLine(Calculate(10000));	//500
	Console.WriteLine(Calculate(60000));	//6000
	Console.WriteLine(Calculate(200000));	//40000

//Логический паттерн позволяет использовать логические операторы and (логическое умножение или операция логического И) и or (логическое сложение или операция логического ИЛИ) для объединения операций сравнения. Например, передадим в метод возраст и возвратим соответствующее сообщение:

static string CheckAge(int age)
{
	return age switch
	{
		<1 or >110 => "Ясно автору 0\111 лет",	//если age меньше 1 и больше 110
		>=1 and <18 => "Доступ запрещен",		//если age равно или больше 1 и меньше 18
		_ => "Добро пожаловать"					//в остальных случаях
	};
}

//Применение
static void Main()
{
	Console.WriteLine(CheckAge(200));	//Недействительный возраст
	Console.WriteLine(CheckAge(0));		//Недействительный возраст
	Console.WriteLine(CheckAge(17));	//Доступ запрещен
	Console.WriteLine(CheckAge(18));	//Доступ разрешен	
}

//Еще один логический оператор - not используется для отрицания и возращает true, если его аргумент равен false:
static string Checkage(int age) => age switch
{
	not 33 => "Вам не 33",
	_ => "Вам 33"
};